FilFinder3D.py

This contains initial work done to create a class object which houses all 
functions and control. Quickly abandoned.

test_graph.py

Contains a test Networkx.Graph() object to import and test with

project_test.py

This contains all the main work done. Includes definitions for the functions
we would need to proceed with 3D work.
Also if run, runs some test data at the end of the script.



To Do:

- Smooth the way cutting nodes work
- Cut subgraphs under certain node length
- Equivalent longest paths? How to deal with this
- Combining subgraphs into main Network.Graph() object
- Combining aforementioned Network.Graph() object and returning to original data sets/arrays
- Adaptive Thresholding

Logging Backup Info:

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Delete old handlers
if (logger.hasHandlers()): 
    logger.handlers.clear()
    
logger.propagate = False
#Creating File Output
                        # Will go here eventually
# Creat console handler
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
# Create formatter
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%d-%m-%Y %I:%M:%S')
# Add to handlers
                        # Add to File output 
ch.setFormatter(formatter)
# Add handlers to the logger
logger.addHandler(ch)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #